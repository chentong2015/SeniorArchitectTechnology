对技术的认知：
 1. 为什么，背后的逻辑是什么 ?
 2. 如何证明，如何从源码实现 ?
 3. 不轻信书和网上资料

架构师：
 1. 对技术的选择
 2. 对技术的理解和认识
 3. 对底层的理解，设计的缘由，理解源码

框架: 一组用于在特定平台或多个平台上开发代码的类库
技术栈: 一组技术，通常包括(多个)框架
企业级项目5大方面：高可用，高并发，高性能(扩展)，安全，监控


架构师全教程    https://mikechen.cc/
推荐技术文章    https://tech.meituan.com/
架构师的视角    https://icyfenix.cn/exploration/projects/
参考课程: 图灵课堂，鲁班学院，环环带你学java，图灵-程序媛易晴，图灵诸葛官方，图灵学院-诸葛老师


软件开发从0到1，生命周期，最佳实践
1. README文档该如何写，如何持续更新
   项目简介：用一两句话简单描述该项目所实现的业务功能；
   技术选型：列出项目的技术栈，包括语言、框架和中间件等；
   本地构建：列出本地开发过程中所用到的工具命令；
   领域模型：核心的领域概念，专业术语；
   测试策略：自动化测试如何分类，哪些必须写测试，哪些没有必要写测试；
   技术架构：技术架构图；
   部署架构：部署架构图；
   外部依赖：项目运行时所依赖的外部集成方，比如订单系统会依赖于会员系统；
   环境信息：各个环境的访问方式，数据库连接等；
   编码实践：统一的编码实践，比如异常处理原则、分页封装等；
   FAQ：开发过程中常见问题的解答。
2. 项目构建结构，基于业务划分Module
3. 单元测试的集成(测试)
   单元测试：核心的领域模型，包括领域对象(比如Order类)，Factory类，领域服务类等
   组件测试：不适合写单元测试但是又必须测试的类，比如Repository类
   API测试：模拟客户端测试各个API接口，需要启动程序
4. 日志处理
   4.1 日志中加入请求标识，便于链路追踪
   4.2 多节点部署的场景下，集中式日志管理
       Logback Redis Appender: Delivering logback logs to Logstash through Redis Server
       Splunk
       Graylog	   
5. 异常处理框架
   5.1 向客户端提供格式统一的异常返回(使用自定义的异常)
   5.2 异常信息中应该包含足够多的上下文信息，最好是结构化的数据以便于客户端解析
   5.3 不同类型的异常应该包含唯一标识，以便客户端精确识别
6. 统一代码风格
   善用开发模式和Clean Code
   代码检查: Checkstyle, Spotbugs, Dependency check, Sonar
7. API文档
   Swagger能自动识别代码中的方法参数、返回对象和URL等信息，然后自动地实时地创建出API文档
8. 数据库迁移
   Flywayq迁移工具
9. 跨域资源共享 CORS 
   Cross-origin resource sharing是JSONP模式的现代版
10. 第三方类库
   Guava：来自Google的常用类库，工具包  
   Apache Commons：来自Apache的常用类库
   Mockito：主要用于单元测试的mock
   DBUnit：测试中管理数据库测试数据
   Rest Assured：用于Rest API测试
   Jackson 2：Json数据的序列化和反序列化
   jjwt：Jwt token认证
   Lombok：通过注解替代POJO中的基本方法
   Feign：声明式Rest客户端
   Tika：用于准确检测文件类型
   itext：生成Pdf文件等
   zxing：生成二维码
   Xstream：比Jaxb更轻量级的XML处理库







   









